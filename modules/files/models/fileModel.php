<?phpclass fileModel extends model{    protected $_properties = array(        'id'=>array(// UUID            'class'=>'uuidProperty',            'field'=>'uuid',            'primaryKey'=>true,        ),        'siteId'=>array(            'class'=>'stringProperty',            'field'=>'site_id'        ),        'folderId'=>array(            'class'=>'stringProperty',            'field'=>'folder_id'        ),        'size'=>array(            'class'=>'integerProperty',            'field'=>'size'        ),        'width'=>array(            'class'=>'integerProperty',            'field'=>'width'        ),        'height'=>array(            'class'=>'integerProperty',            'field'=>'height'        ),        'ext'=>array(            'class'=>'stringProperty',            'field'=>'ext'        ),        'name'=>array(// original file name            'class'=>'stringProperty',            'field'=>'name'        ),            /* 'settings' => array(              'class' => 'stringProperty',              'field' => 'settings'              ), */    );    protected $_actAs = array('timestampable');    public function toObject(){        $knownExt = array('pdf', 'txt', 'html', 'swf', 'php', 'exe');        $imageExt = array('jpg', 'png', 'gif', 'jpeg');        $obj = new stdClass();        $obj->type = 'file';        $img = 'file';        if (in_array(strval($this->ext), $knownExt)){            $img = strval($this->ext);        }        $img = '/css/images/ext/.thumb/tmm64x64_'.$img.'.png';        if (in_array(strval($this->ext), $imageExt)){            $img = $this->getThumbnail(64, 64, 'fit')->getUri();        }        $obj->id = strval($this->id);        $obj->name = strval($this->name);        $obj->icon = strval($img);        $obj->href = $this->getHref();        return $obj;    }    public function preInsert(){        $this->id = strval(uuid::v4());    }    public function preDelete(){        $res = $this->getResource();        if ($res->exists()){            $res->remove();        }    }    public static function fromUrl($url){        $base36 = reset(explode('.', basename($url)));        $hex = yMath::baseConvert($base36, 36, 16);        $uuid =                substr($hex, 0, 8).'-'.                substr($hex, 8, 4).'-'.                substr($hex, 12, 4).'-'.                substr($hex, 16, 4).'-'.                substr($hex, 20, 12)        ;        return self::get($uuid);    }    public static function get($uuid){        $files = modelCollection::getInstance('fileModel');        return $files->select($files->id->is($uuid))->fetch();    }    public function moveToFolder($folderId){        $sourceFolder = fileFolderModel::get($this->folderId);        if (($targetFolder = fileFolderModel::get($folderId))){            $this->folderId = $targetFolder->id;            $this->save();            $targetFolder->updateSize();            if ($sourceFolder){                $sourceFolder->updateSize();            }            return true;        }        return false;    }    public function getHex(){        $uuid = $this->id->getValue();        return str_replace(array('-', '{', '}', '(', ')'), '', $uuid);    }    public function getBase36(){        return yMath::baseConvert($this->getHex(), 16, 36);    }    public function copyTo($destination){        $f = $this->getResource();        $f->copy($destination);    }    public function getResource(){        $vfs = yVirtualFileSystem::getInstance();        $files = $vfs->getResource('files::');        $hex = $this->getHex();        $d1 = substr($hex, 0, 1);        $d = $files->getResource($d1);        $d2 = substr($hex, 1, 1);        $d = $d->getResource($d2);        $fname = $this->getBase36().'.'.$this->ext;        $f = $d->getResource($fname);        return $f;    }    public function upload($tmp){        $info = getimagesize($tmp);        if ($info){            $this->width = $info[0];            $this->height = $info[1];        }        $hex = $this->getHex();        $d1 = substr($hex, 0, 1);        $d2 = substr($hex, 1, 1);        $fname = $this->getBase36().'.'.$this->ext;        $vfs = yVirtualFileSystem::getInstance();        $files = $vfs->getResource('files::');        $d = $files->getResource($d1);        $d->mkDir();        $d = $d->getResource($d2);        $d->mkDir();        $f = $d->getResource($fname);        //echo $f->getPath()."\r\n";        $f->upload($tmp);        $this->save();    }    public function getHref(){        $f = $this->getResource();        return $f->getUri();    }    public function getThumbnail($width, $height, $method = 'crop'){        switch ($method){            case 'fit':                $prefix = 'tmm';                break;            case 'crop':                $prefix = 'tmc';                break;            case 'stretch':                $prefix = 'tms';                break;        }        $vfs = yVirtualFileSystem::getInstance();        $files = $vfs->getResource('files::');        $hex = $this->getHex();        $d1 = substr($hex, 0, 1);        $d2 = substr($hex, 1, 1);        $fname = $prefix.$width.'x'.$height.'_'.$this->getBase36().'.'.$this->ext;        $f = $files->getResource($d1.'/'.$d2.'/.thumb/'.$fname);        return $f;    }    public function flashHtml($width = 'auto', $height = 'auto'){        list($w, $h) = array(strval($this->width), strval($this->height)); //getimagesize($this->sourcePath());        if ($width == 'auto')            $width = $w;        if ($height == 'auto')            $height = $h;        return //'<div style="width: '.$this->_px($width).';height: '.$this->_px($height).'">'.                //$this->id.','.$this->getHref().'('.$width.'x'.$height.')('.$w.'x'.$h.')'.                '<object width="'.$width.'"'.($height == 0?'':' height="'.$height.'"').'>'.                '<param name="movie" value="'.$this->getHref().'"></param>'.                '<param name="wmode" value="transparent"></param>'.                '<param name="allowFullScreen" value="true"></param>'.                '<param name="allowscriptaccess" value="always"></param>'.                '<embed src="'.$this->getHref().'" type="application/x-shockwave-flash" '.                'wmode="transparent" allowscriptaccess="always" allowfullscreen="true" width="'.$width.'"'.($height == 0?'':' height="'.$height.'"').'></embed>'.                '</object>'; //</div>';    }    public function postInsert(){        //site::getSelected()->updateFiles();    }}